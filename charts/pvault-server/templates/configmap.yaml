---
{{  $dbHost := "" }}
{{  $dbName := "" }}
{{  $dbUser := "" }}

# If dev psql is enabled, override Vault configurations. Otherwise, enforce them.
{{- if .Values.postgresql.enabled }}
{{ $dbHost = printf "%s-postgresql" .Chart.Name | quote }}
{{ $dbName = default "pvault" .Values.postgresql.auth.database | quote }}
{{ $dbUser = default "pvault" .Values.postgresql.auth.username | quote }}
{{- else }}
{{ $dbHost = required "A valid .Values.pvault.db.hostname entry required!" .Values.pvault.db.hostname | quote }}
{{ $dbName = required "A valid .Values.pvault.db.name entry required!" .Values.pvault.db.name | quote }}
{{ $dbUser = required "A valid .Values.pvault.db.user entry required!" .Values.pvault.db.user | quote }}
{{- end }}

kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ include "pvault-server.fullname" . }}-variables
  labels:
    {{- include "pvault-server.labels" . | nindent 4 }}
  {{- with .Values.additionalConfigMapAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  pvault.system.toml: |
    # -----------------------------
    # Piiano Vault configuration file
    # -----------------------------

    devmode = {{ .Values.pvault.devmode }}

    [db]
    hostname    = {{ $dbHost }}
    name        = {{ $dbName }}
    user        = {{ $dbUser }}
    port        = {{ .Values.pvault.db.port }}
    {{- if kindIs "bool" .Values.pvault.db.requireTLS }}
    require_tls = {{ .Values.pvault.db.requireTLS }}
    {{ end }}

    [service]
    listen_addr             = "0.0.0.0:8123"
    {{- if kindIs "bool" .Values.pvault.app.adminMayReadData }}
    admin_may_read_data     = {{ .Values.pvault.app.adminMayReadData }}
    {{ end }}
    timeout_seconds         = {{ .Values.pvault.app.timeoutSeconds }}
    cache_refresh_interval_seconds = {{ .Values.pvault.app.cacheRefreshIntervalSeconds }}
    default_page_size       = {{ .Values.pvault.app.defaultPageSize }}
    max_page_size           = {{ .Values.pvault.app.maxPageSize }}
    set_iam_on_start_only   = {{ .Values.pvault.app.setIAMOnStartOnly }}
    update_schema_on_start  = {{ .Values.pvault.app.updateSchemaOnStart }}

    [tls]
    {{- if kindIs "bool" .Values.pvault.tls.enable }}
    enable = {{ .Values.pvault.tls.enable }}
    {{ end }}
    cert_file   = {{ .Values.pvault.tls.certFile | quote }}
    key_file    = {{ .Values.pvault.tls.keyFile | quote }}
    selfsigned  = {{ .Values.pvault.tls.selfsigned }}

    [features]
    encryption          = {{ .Values.pvault.features.encryption }}
    api_key_hashing     = {{ .Values.pvault.features.apiKeyHashing }}
    policy_enforcement  = {{ .Values.pvault.features.policyEnforcement }}
    mask_license        = {{ .Values.pvault.features.maskLicense }}
    custom_types_enable = {{ .Values.pvault.features.customTypesEnable }}

    [kms]
    uri   = {{ .Values.pvault.kms.uri | quote }}
    export_uri  = {{ .Values.pvault.kms.exportUri | quote }}
    {{- if kindIs "bool" .Values.pvault.kms.allow_local }}
    enable = {{ .Values.pvault.kms.allow_local }}
    {{ end }}

    [log]
    level               = {{ .Values.pvault.log.level | quote }}
    datadog_apm_enable  = {{ .Values.pvault.log.datadogAPMEnable }}
    customer_env        = {{ .Values.pvault.log.customerEnv | quote }}
    customer_identifier = {{ required "A valid .Values.pvault.log.customerIdentifier is required." .Values.pvault.log.customerIdentifier | quote }}
  {{- with .Values.pvault.startupIAMFile }}
  pvault.iam.toml: |-
    {{- . | nindent 4 }}
  {{- end }}
  {{- with .Values.pvault.startupCollectionsFile }}
  pvault.collections.pvschema: |-
    {{- . | nindent 4 }}
  {{- end }}
  {{- with .Values.pvault.startupDataTypesFile }}
  pvault.types.toml: |-
    {{- . | nindent 4 }}
  {{- end }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ include "pvault-server.fullname" . }}-env-vars
  labels:
    {{- include "pvault-server.labels" . | nindent 4 }}
  {{- with .Values.additionalConfigMapAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  PVAULT_LOG_DATADOG_ENABLE: {{ required "A valid .Values.pvault.log.datadogEnable is required" .Values.pvault.log.datadogEnable | quote }}
  PVAULT_SENTRY_ENABLE: {{ required "A valid .Values.pvault.sentry.enable is required" .Values.pvault.sentry.enable | quote }}
{{- with .Values.pvault.extraEnvVars }}
  {{- toYaml . | nindent 2 }}
{{- end }}
