{{ $dbPass := default .Values.postgresql.auth.password .Values.pvault.db.password }}

{{ $usePassword := and (not .Values.pvault.db.existingPasswordSecret) $dbPass }}
{{ $useAdminAPIKey := and (not .Values.pvault.app.existingAdminAPIKeySecret) .Values.pvault.app.adminAPIKey }}
{{ $useLicense := and (not .Values.pvault.app.existingLicenseSecret) .Values.pvault.app.license }}

{{/*
The user is required to provide a license.
*/}}
{{- if and (not .Values.pvault.app.license) (not .Values.pvault.app.existingLicenseSecret) -}}
  {{- fail "A valid .Values.pvault.app.license or .Values.pvault.app.existingLicenseSecret is required" -}}
{{- end -}}

{{- if or $usePassword $useAdminAPIKey $useLicense -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "pvault-server.fullname" . }}
  labels:
    {{- include "pvault-server.labels" . | nindent 4 }}
  {{- with .Values.additionalSecretsAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
type: Opaque
data:
  {{- if $usePassword }}
  pvault-db-password: {{ $dbPass | b64enc }}
  {{- end -}}
  {{- if $useAdminAPIKey }}
  admin-api-key: {{ .Values.pvault.app.adminAPIKey | b64enc }}
  {{- end -}}
  {{- if $useLicense }}
  license: {{ .Values.pvault.app.license | b64enc }}
  {{- end -}}
{{- end -}}