{{- $hasKmsSeed := or .Values.pvault.kms.existingSeedSecret .Values.pvault.kms.seed }}
{{- $hasKmsExportSeed := or .Values.pvault.kms.existingExportSeedSecret .Values.pvault.kms.exportSeed }}
{{- $deployLabels := include "pvault-server.tplvalues.merge" (dict "values" (list .Values.labels .Values.commonLabels) "context" .) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pvault-server.fullname" . }}
  namespace: {{ include "pvault-server.namespace" . | quote }}
  labels: {{- include "pvault-server.labels.standard" (dict "customLabels" $deployLabels "context" .) | nindent 4 }}
  {{- if or .Values.annotations .Values.commonAnnotations }}
  {{- $deployAnnotations := include "pvault-server.tplvalues.merge" (dict "values" (list .Values.annotations .Values.commonAnnotations) "context" .) }}
  annotations: {{- include "pvault-server.tplvalues.render" (dict "value" $deployAnnotations "context" .) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.updateStrategy }}
  strategy: {{ include "pvault-server.tplvalues.render" (dict "value" .Values.updateStrategy "context" .) | nindent 4 }}
  {{- end }}
  {{- if .Values.minReadySeconds }}
  minReadySeconds: {{ include "pvault-server.tplvalues.render" (dict "value" .Values.minReadySeconds "context" .) }}
  {{- end }}
  template:
    metadata:
      annotations:
        {{- if or .Values.podAnnotations .Values.commonAnnotations }}
        {{- $podAnnotations := include "pvault-server.tplvalues.merge" (dict "values" (list .Values.podAnnotations .Values.commonAnnotations) "context" .) }}
        {{- include "pvault-server.tplvalues.render" (dict "value" $podAnnotations "context" .) | nindent 8 }}
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels: {{- include "pvault-server.labels.standard" (dict "customLabels" (include "pvault-server.pod.labels" .) "context" .) | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pvault-server.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      {{- with .Values.dnsPolicy }}
      dnsPolicy: {{ . | quote }}
      {{- end }}
      enableServiceLinks: false
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "pvault-server.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "pvault-server.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "pvault-server.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "pvault-server.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- include "pvault-server.compatibility.renderSecurityContext" (dict "secContext" .Values.podSecurityContext "context" .) | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.securityContext.enabled }}
          securityContext: {{- include "pvault-server.compatibility.renderSecurityContext" (dict "secContext" .Values.securityContext "context" .) | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ default .Chart.AppVersion .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: pvault-port
              containerPort: 8123
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: pvault-port
              scheme: {{ .Values.livenessProbe.scheme }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: pvault-port
              scheme: {{ .Values.readinessProbe.scheme }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.startupProbe.path }}
              port: pvault-port
              scheme: {{ .Values.startupProbe.scheme }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- /* If CPU and memory limits are not specified for a container, and you use the downward API to try to expose that information, then the kubelet defaults to exposing the maximum allocatable value for CPU and memory based on the node allocatable calculation. */}}
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: {{ ternary "limits.cpu" "requests.cpu" (empty .Values.resources.requests.cpu) }}
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            {{- if .Values.pvault.log.datadogAPMEnable }}
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            {{- end }}
            {{- if .Values.dbCARootCertificate }}
            - name: PGSSLROOTCERT
              value: /etc/pvault/certs/db-ca-bundle.pem
            {{- end }}
            {{- range $key, $value := .Values.pvault.directEnvVars }}
            - name: {{ tpl $key $ | quote }}
              value: {{ tpl $value $ | quote }}
            {{- end }}
            {{- if .Values.pvault.extraEnv }}
            {{- include "pvault-server.tplvalues.render" (dict "value" .Values.pvault.extraEnv "context" .) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "pvault-server.fullname" . }}-env-vars
            {{- if .Values.pvault.extraEnvFromCM }}
            - configMapRef:
                name: {{ include "pvault-server.tplvalues.render" (dict "value" .Values.pvault.extraEnvFromCM "context" .) }}
            {{- end }}
            {{- if .Values.pvault.extraEnvFromSecret }}
            - secretRef:
                name: {{ include "pvault-server.tplvalues.render" (dict "value" .Values.pvault.extraEnvFromSecret "context" .) }}
            {{- end }}
          volumeMounts:
            - name: pvault-system-toml-volume
              mountPath: /etc/pvault/conf.d
            - name: secret-db-password-volume
              mountPath: /etc/pvault/secrets/db_password
            - name: secret-admin-api-key-volume
              mountPath: /etc/pvault/secrets/api_key
            - name: secret-license-volume
              mountPath: /etc/pvault/secrets/license
            {{- if $hasKmsSeed }}
            - name: secret-kms-seed-volume
              mountPath: /etc/pvault/secrets/kms_seed
            {{- end }}
            {{- if $hasKmsExportSeed }}
            - name: secret-kms-export-seed-volume
              mountPath: /etc/pvault/secrets/kms_export_seed
            {{- end }}
            {{- if .Values.dbCARootCertificate}}
            - name: db-ca-cert-volume
              mountPath: /etc/pvault/certs
            {{- end }}
      volumes:
        - name: pvault-system-toml-volume
          configMap:
            name: {{ include "pvault-server.fullname" . }}-variables
        {{- include "pvault-server.secrets.volume" (dict "secretName" "secret-db-password-volume" "existingSecret" .Values.pvault.db.existingPasswordSecret "existingSecretKey" .Values.pvault.db.existingPasswordSecretKey "defaultSecretKey" "pvault-db-password" "context" .) | nindent 8 }}
        {{- include "pvault-server.secrets.volume" (dict "secretName" "secret-admin-api-key-volume" "existingSecret" .Values.pvault.app.existingAdminAPIKeySecret "existingSecretKey" .Values.pvault.app.existingAdminAPIKeySecretKey "defaultSecretKey" "admin-api-key" "context" .) | nindent 8 }}
        {{- include "pvault-server.secrets.volume" (dict "secretName" "secret-license-volume" "existingSecret" .Values.pvault.app.existingLicenseSecret "existingSecretKey" .Values.pvault.app.existingLicenseSecretKey "defaultSecretKey" "license" "context" .) | nindent 8 }}
        {{- if $hasKmsSeed }}
        {{- include "pvault-server.secrets.volume" (dict "secretName" "secret-kms-seed-volume" "existingSecret" .Values.pvault.kms.existingSeedSecret "existingSecretKey" .Values.pvault.kms.existingSeedSecretKey "defaultSecretKey" "kms-seed" "context" .) | nindent 8 }}
        {{- end }}
        {{- if $hasKmsExportSeed }}
        {{- include "pvault-server.secrets.volume" (dict "secretName" "secret-kms-export-seed-volume" "existingSecret" .Values.pvault.kms.existingExportSeedSecret "existingSecretKey" .Values.pvault.kms.existingExportSeedSecretKey "defaultSecretKey" "kms-export-seed" "context" .) | nindent 8 }}
        {{- end }}
        {{- if .Values.dbCARootCertificate}}
        - name: db-ca-cert-volume
          configMap:
            name: {{ include "pvault-server.fullname" . }}-db-ca-cert
        {{- end }}
  selector:
    matchLabels: {{- include "pvault-server.labels.matchLabels" (dict "customLabels" (include "pvault-server.pod.labels" .) "context" .) | nindent 6 }}
