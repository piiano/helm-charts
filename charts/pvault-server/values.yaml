## @section Common parameters
##

## @param nameOverride String to override the default chart name.
##
nameOverride: ""
## @param fullnameOverride String to override the default fully qualified app name.
##
fullnameOverride: ""

## @param commonLabels Add labels to all Piiano Vault Server resources.
##
commonLabels: {}
## @param commonAnnotations Add annotations to all Piiano Vault Server resources.
##
commonAnnotations: {}

## @section Deployment parameters
##

## @param labels Add labels to Piiano Vault Server deployment.
##
labels: {}
## @param annotations Add annotations to Piiano Vault Server deployment.
##
annotations: {}

## @param replicaCount Number of Piiano Vault Servers instances to run.
##
replicaCount: 1

## @param updateStrategy.type Set up update strategy for Piiano Vault Server deployment.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Example:
## updateStrategy:
##  type: RollingUpdate
##  rollingUpdate:
##    maxSurge: 25%
##    maxUnavailable: 25%
##
updateStrategy:
  type: RollingUpdate

## @param minReadySeconds Minimum number of seconds for the pod to be considered available.
##
minReadySeconds: 10

## Piiano Vault Server image version.
## ref: https://hub.docker.com/r/piiano/pvault-server/tags
image:
  ## @param image.repository Piiano Vault Server image repositoryl
  ##
  repository: piiano/pvault-server
  ## @param image.pullPolicy Piiano Vault Server image pull policy.
  ##
  pullPolicy: IfNotPresent
  ## @param image.tag Piiano Vault Server image tag (immutable tags are recommended).
  #
  tag: 1.15.0

## @param imagePullSecrets Specify image pull secrets.
##
imagePullSecrets: []

## @param automountServiceAccountToken Mount Service Account token in pod
##
automountServiceAccountToken: true

## Service account for Piiano Vault Server to use.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## @param serviceAccount.create Whether a service account should be created.
  ##
  create: true
  ## @param serviceAccount.annotations Annotations to add to the service account
  ##
  annotations: {}
  ## @param serviceAccount.name The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template.
  ##
  name: ""

## @param dnsPolicy Default dnsPolicy setting
## If you enable hostNetwork then you may need to set your dnsPolicy to something other
## than `ClusterFirst` depending on your requirements.
dnsPolicy: ClusterFirst

## @param podLabels Add labels to Piiano Vault Server pods.
##
podLabels: {}

## @param podAnnotations Add annotations to Piiano Vault Server pods.
##
podAnnotations: {}

## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
## @param podSecurityContext [object] Pod Security Context configuration.
podSecurityContext:
  enabled: true
  fsGroup: 1000
  fsGroupChangePolicy: OnRootMismatch
  supplementalGroups: []
  sysctls: []

## Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
## @param securityContext [object] Security Context configuration.
securityContext:
  enabled: true
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
  seLinuxOptions: {}
  seccompProfile:
    type: RuntimeDefault

## Liveness Probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
## @param livenessProbe [object] Liveness Probe configuration.
livenessProbe:
  enabled: true
  path: /api/pvlt/1.0/data/info/health
  scheme: HTTP
  initialDelaySeconds: 0
  periodSeconds: 20
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

## Readiness Probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
## @param readinessProbe [object] Readiness Probe configuration.
readinessProbe:
  enabled: true
  path: /api/pvlt/1.0/data/info/health
  scheme: HTTP
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 2
  successThreshold: 1
  failureThreshold: 3

## Startup Probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
## @param startupProbe [object] Startup Probe configuration.
startupProbe:
  enabled: true
  path: /api/pvlt/1.0/data/info/health
  scheme: HTTP
  initialDelaySeconds: 2
  periodSeconds: 2
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 60

## @param terminationGracePeriodSeconds Specify Pod termination grace period.
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/
terminationGracePeriodSeconds: 30

## Piiano Vault Server service configuration.
##
service:
  ## @param service.labels Add labels to Piiano Vault Server service.
  ##
  labels: {}
  ## @param service.annotations Add annotations to Piiano Vault Server service.
  ##
  annotations: {}
  ## @param service.type Kubernetes Service type. For example: ClusterIP / NodePort.
  ##
  type: ClusterIP
  ## @param service.port Piiano Vault Server service port.
  ##
  port: 8123
  ## @param service.nodePort Piiano Vault Server service node port.
  ##
  nodePort:
  ## @param service.externalTrafficPolicy Piiano Vault Server service external traffic policy.
  ##
  externalTrafficPolicy:
  ## @param service.internalTrafficPolicy Piiano Vault Server service internal traffic policy.
  ##
  internalTrafficPolicy:
  ## @param service.loadBalancerClass Piiano Vault Server service loadbalancer class.
  ##
  loadBalancerClass:
  ## @param service.clusterIP Piiano Vault Server service cluster IP.
  ##
  clusterIP:
  ## @param service.sessionAffinity Piiano Vault Server service session affinity.
  ##
  sessionAffinity:
  ## @param service.sessionAffinityConfig Piiano Vault Server service session affinity config.
  ##
  sessionAffinityConfig:
  ## @param service.trafficDistribution Piiano Vault Server service traffic distribution.
  ##
  trafficDistribution:

## Configure the ingress resource that allows you to access Piiano Vault Server.
## ref: https://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress generation.
  ##
  enabled: false
  ## @param ingress.className IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster.
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  className: ""
  ## @param ingress.annotations Additional custom annotations for the ingress.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  annotations: {}
  ## @param ingress.hosts An array with hostname(s) to be covered with the ingress.
  ## e.g:
  ## hosts:
  ## - host: schema-registry.local
  ##   paths:
  ##     - path: /
  ##       pathType: Prefix
  hosts: []
  ## @param ingress.tls TLS configuration for hostname(s) to be covered with this ingress.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## e.g:
  ## tls:
  ## - secretName: chart-example-tls
  ##   hosts:
  ##     - chart-example.local
  tls: []

## Deployment container resource requests and limits.
## ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
## @param resources.limits The resources limits for the container.
## @param resources.requests The requested resources for the container.
##
resources:
  ## Example:
  ## limits:
  ##    cpu: 100m
  ##    memory: 128Mi
  ##
  limits: {}
  ## Examples:
  ## requests:
  ##    cpu: 100m
  ##    memory: 128Mi
  ##
  requests: {}

## Piiano Vault Server Autoscaling parameters.
## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
## @param autoscaling.enabled Enable autoscaling for replicas.
## @param autoscaling.annotations HPA annotations.
## @param autoscaling.minReplicas Minimum number of replicas.
## @param autoscaling.maxReplicas Maximum number of replicas.
## @param autoscaling.targetCPUUtilizationPercentage [nullable] Target CPU utilization percentage.
## @param autoscaling.targetMemoryUtilizationPercentage [nullable] Target Memory utilization percentage.
##
autoscaling:
  enabled: false
  annotations: {}
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## Pod Disruption Budget configuration.
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
## @param pdb.enabled Create a Pod Disruption Budget
## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
## @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable. Defaults to `1` if both `pdb.minAvailable` and `pdb.maxUnavailable` are empty.
##
pdb:
  enabled: false
  minAvailable: ""
  maxUnavailable: ""

## @param nodeSelector Node labels for pod assignment.
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## @param tolerations Tolerations for pod assignment.
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## @param affinity Affinity for pod assignment.
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}

## @param additionalSecretsAnnotations Add annotations to the Kubernetes secret.
##
additionalSecretsAnnotations: {}

## @param additionalConfigMapAnnotations Add annotations to the ConfigMaps.
##
additionalConfigMapAnnotations: {}

##################

## @section Piiano Vault parameters
##
pvault:
  ## Piiano Vault DB parameters.
  ## ref: https://piiano.com/docs/guides/configure/environment-variables#database
  db:
    ## @param pvault.db.user Username for the database. If `postgresql.enabled` is `true` then this value is ignored in favor of `postgresql.auth.username`.
    ##
    user: pvault
    ## @param pvault.db.password Password for the database. If `postgresql.enabled` is `true` then this value is ignored in favor of `postgresql.auth.password`.
    ##
    password: ""
    ## @param pvault.db.existingPasswordSecret The name of an existing secret containing the DB password.
    ## Note: Must contain a key as specified by existingPasswordSecretKey.
    ## Note: If set, the `password` parameter is ignored.
    ##
    existingPasswordSecret: ""
    ## @param pvault.db.existingPasswordSecretKey The key in an existing secret that contains the DB password.
    ## Note: Only used when existingPasswordSecret is set.
    ##
    existingPasswordSecretKey: ""
    ## @param pvault.db.name Name of the database to connect to. If `postgresql.enabled` is `true` then this value is ignored in favor of `postgresql.auth.database`.
    ##
    name: pvault
    ## @param pvault.db.hostname Hostname of the running database. If `postgresql.enabled` is `true` then this value is ignored.
    ##
    hostname: ""
    ## @param pvault.db.port Port of the running database.
    ##
    port: 5432
    ## @param pvault.db.requireTLS Vault tries to connect to the database with TLS. Default is dependant on `devmode`.
    ##
    requireTLS: null

  ## Piiano Vault Mode.
  ## ref: https://piiano.com/docs/guides/configure/environment-variables#production-and-development-mode
  ##

  ## @param pvault.devmode Whether Vault runs in development mode.
  ##
  devmode: false

  ## Piiano Vault service and features.
  ## ref: https://piiano.com/docs/guides/configure/environment-variables#service-and-features
  ##
  features:
    ## @param pvault.features.apiKeyHashing Whether API keys for users are hashed when stored on the database.
    ##
    apiKeyHashing: true
    ## @param pvault.features.customTypesEnable Whether Vault should read the pvault.types.toml file and apply the custom types, transformations and validators that it includes.
    ##
    customTypesEnable: false
    ## @param pvault.features.encryption This variable is ignored in production. In production, properties set as is_encrypted are always stored encrypted. When this variable is set to false (only in PVAULT_DEVMODE), properties stored unencrypted.
    ##
    encryption: true
    ## @param pvault.features.maskLicense Whether Vault's service license will be masked while retrieving it.
    ##
    maskLicense: false
    ## @param pvault.features.policyEnforcement Whether policy management is enforced.
    ##
    policyEnforcement: true
  app:
    ## @param pvault.app.adminAPIKey The admin API key for authentication.
    ##
    adminAPIKey: pvaultauth
    ## @param pvault.app.existingAdminAPIKeySecret The name of an existing secret containing the admin API key.
    ## Note: Must contain a key as specified by existingAdminAPIKeySecretKey.
    ## Note: If set, the `adminAPIKey` parameter is ignored.
    ##
    existingAdminAPIKeySecret: ""
    ## @param pvault.app.existingAdminAPIKeySecretKey The key in an existing secret that contains the admin API key.
    ## Note: Only used when existingAdminAPIKeySecret is set.
    ##
    existingAdminAPIKeySecretKey: ""
    ## @param pvault.app.adminMayReadData Whether Admin is allowed to read data. Default is dependant on `devmode`.
    ##
    adminMayReadData: null
    ## @param pvault.app.cacheRefreshIntervalSeconds The refresh interval in seconds of the control data cache. If this value is zero the cache is disabled.
    ##
    cacheRefreshIntervalSeconds: 30
    ## @param pvault.app.defaultPageSize The default page size for object queries when the page size is not specified. The page size is the maximum number of objects that may be requested in one call.
    ##
    defaultPageSize: 100
    ## @param pvault.app.maxPageSize The maximum page size that can be specified for a call. The page size is the maximum number of objects that may be requested in one call.
    ##
    maxPageSize: 1000
    ## @param pvault.app.timeoutSeconds Timeout in seconds for REST API calls.
    ##
    timeoutSeconds: 30
    ## @param pvault.app.license A valid Piiano Vault license is required to start your Vault. The license is a string of characters.
    ## ref: https://piiano.com/docs/guides/configure/environment-variables#piiano-vault-license
    ##
    license: ""
    ## @param pvault.app.existingLicenseSecret The name of an existing secret containing the license.
    ## Note: Must contain a key as specified by existingLicenseSecretKey.
    ## Note: If set, the `license` parameter is ignored.
    ##
    existingLicenseSecret: ""
    ## @param pvault.app.existingLicenseSecretKey The key in an existing secret that contains the license.
    ## Note: Only used when existingLicenseSecret is set.
    ##
    existingLicenseSecretKey: ""
    ## @param pvault.app.setIAMOnStartOnly Whether to load the IAM configuration file every time Vault starts.
    ## ref: https://piiano.com/docs/guides/configure/custom-configuration-file#iam-configuration-file
    ##
    setIAMOnStartOnly: false
    ## @param pvault.app.updateSchemaOnStart Whether to update the collections schema every time Vault starts.
    ## ref: https://piiano.com/docs/guides/configure/custom-configuration-file#collections-configuration-file
    ##
    updateSchemaOnStart: false

  ## Piiano Vault KMS.
  ## ref: https://piiano.com/docs/guides/configure/environment-variables#key-management-service
  ##
  kms:
    ## @param pvault.kms.uri The KMS key URI used for property encryption.
    ##
    uri: ""
    ## @param pvault.kms.seed Generate a local KMS using this seed (KMS_URI can be unset).
    ##
    seed: ""
    ## @param pvault.kms.exportUri The KMS key URI used for encryption by the Vault export procedure.
    ##
    exportUri: ""
    ## @param pvault.kms.exportSeed The seed for generating a local KMS for the Vault export procedure (KMS_EXPORT_URI can be unset).
    ##
    exportSeed: ""
    ## @param pvault.kms.existingSeedSecret The name of an existing secret containing the KMS seed.
    ## Note: Must contain a key as specified by existingSeedSecretKey.
    ## Note: If set, the `seed` parameter is ignored.
    ##
    existingSeedSecret: ""
    ## @param pvault.kms.existingSeedSecretKey The key in an existing secret that contains the KMS seed.
    ## Note: Only used when existingSeedSecret is set.
    ##
    existingSeedSecretKey: ""
    ## @param pvault.kms.existingExportSeedSecret The name of an existing secret containing the KMS export seed.
    ## Note: Must contain a key as specified by existingExportSeedSecretKey.
    ## Note: If set, the `seed` parameter is ignored.
    ##
    existingExportSeedSecret: ""
    ## @param pvault.kms.existingExportSeedSecretKey The key in an existing secret that contains the KMS export seed.
    ## Note: Only used when existingExportSeedSecret is set.
    ##
    existingExportSeedSecretKey: ""
    ## @param pvault.kms.allow_local Whether to allow a local KMS using a URI or seed. Default is dependant on `devmode`.
    ##
    allow_local: null

  ## Piiano Vault Logs and Telemetry.
  ## ref: https://piiano.com/docs/guides/configure/environment-variables#logs-and-telemetry
  ##
  log:
    ## @param pvault.log.level Log level (supports `debug`, `info`, `warn`, and `error`).
    ##
    level: debug
    ## @param pvault.log.customerEnv Identifies the environment in all the observability platforms. Recommended values are `prod`, `staging`, and `dev`.
    ##
    customerEnv: dev
    ## @param pvault.log.customerIdentifier Identifies the customer in all the observability platforms.
    ##
    customerIdentifier: ""
    ## @param pvault.log.customerRegion Identifies the region in all the observability platforms. Recommended values are `us`, `eu`, `us-east-1`, etc.
    ##
    customerRegion: ""
    ## @param pvault.log.datadogEnable Enable Datadog logs and metrics.
    ##
    datadogEnable: logs,stats,config
    ## @skip pvault.log.datadogAPMEnable (INTERNAL) Enable Datadog application performance monitoring (APM).
    ##
    datadogAPMEnable: false

  sentry:
    ## @param pvault.sentry.enable Enable Sentry telemetry logging.
    ##
    enable: true

  ## Piiano Vault TLS.
  ## ref: https://piiano.com/docs/guides/configure/environment-variables#tls
  ##
  tls:
    ## @param pvault.tls.enable Whether Vault listens on HTTPS (TLS). If `false`, Vault listens on HTTP. If PVAULT_TLS_SELFSIGNED is `true`, this setting is ignored and Vault listens on HTTPS. Default is dependant on `devmode`.
    ##
    enable: null
    ## @param pvault.tls.selfsigned Whether Vault runs with a self-signed TLS key (valid for 24h).
    ##
    selfsigned: false
    ## @param pvault.tls.certFile Path to the TLS certificate file. Must be valid to enable listening on HTTPS (TLS).
    ##
    certFile: ""
    ## @param pvault.tls.keyFile Path to the TLS key file. Must be valid to enable listening on HTTPS (TLS).
    ##
    keyFile: ""

  ## @param pvault.startupIAMFile Vault startup file for IAM configuration.
  ## ref: https://piiano.com/docs/guides/configure/custom-configuration-file#iam-configuration-file
  ##
  startupIAMFile: ""
  ## @param pvault.startupCollectionsFile Vault startup file for schema configuration.
  ## ref:https://piiano.com/docs/guides/configure/custom-configuration-file#collections-configuration-file
  ##
  startupCollectionsFile: ""
  ## @param pvault.startupDataTypesFile Vault startup file for data types configuration.
  ## ref: https://piiano.com/docs/guides/configure/custom-configuration-file#data-types-configuration-file
  ##
  startupDataTypesFile: ""

  ## @param pvault.extraEnvVars Overriding environment variables.
  ##
  extraEnvVars: {}

  ## @param pvault.directEnvVars Directly injected environment variables. WARNING: Directly setting environment variables through this parameter is not recommended. This should only be used if ConfigMaps cannot be used due to a technical reason. Usage of this parameter bypasses ConfigMaps and injects environment variables directly into the Deployment, which may not follow best practices.
  ##
  directEnvVars: {}

##################

## @section Network Policies
## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  ## @param networkPolicy.enabled Specifies whether a NetworkPolicy should be created
  ##
  enabled: false
  ## @param networkPolicy.allowExternal Allow ingress access from any destination to the service port.
  ##
  allowExternal: true
  ## @param networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
  ##
  allowExternalEgress: true
  ## @param networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
  ## e.g:
  ## extraIngress:
  ##   - ports:
  ##       - port: 1234
  ##     from:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  extraIngress: []
  ## @param networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
  ## e.g:
  ## extraEgress:
  ##   - ports:
  ##       - port: 1234
  ##     to:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  ##
  extraEgress: []
  ## @param networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
  ## @param networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
  ##
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

##################

## @section Environment parameters
##

## @param dbCARootCertificate Content of the CA certificate for the database TLS connection, in PEM format.
##
dbCARootCertificate: null

##################

## @section Dependencies parameters
##

## Development postgres parameters.
## ref: https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  ## @param postgresql.enabled Whether or not to deploy a Postgres instance to the cluster. This is for experimentation purposes only and NOT for production. See ref for more configurations.
  ##
  enabled: false
  ## @param postgresql.image.tag Postgres image tag.
  ##
  image:
    tag: 14.12.0
  auth:
    ## @param postgresql.auth.database Name of the database. It is unlikely that you will need to change this parameter.
    ##
    database: pvault
    ## @param postgresql.auth.username Postgres username. It is unlikely that you will need to change this parameter.
    ##
    username: pvault
    ## @param postgresql.auth.password Postgres password. It is unlikely that you will need to change this parameter.
    ##
    password: pvault
  ## @param postgresql.primary.persistence.enabled Use ephemeral storage for Postgres. When `false`, a PVC is not created.
  ##
  primary:
    persistence:
      enabled: false
